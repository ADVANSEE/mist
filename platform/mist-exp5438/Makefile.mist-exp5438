# $Id: Makefile.z1,v 1.4 2010/11/07 08:40:24 enricmcalvo Exp $
# msp430flasher -n msp430x5437 -w "Firmware.txt" -v -z [VCC]

# Default Mist apps
PLATFORMAPPS += aes multichan drowsie drowsie-multichannel

## Auto-detect IAR compiler, use it unless we explicitly told make that IAR=0
#ifndef IAR
#ifneq ($(shell which icc430 2>/dev/null),)
#${info Using autodetected IAR compiler}
#IAR=1
#endif
#endif

ifdef IAR
CFLAGS+=--dlib_config "$(IAR_PATH)/lib/dlib/dl430xlfn.h" -e --vla -Ohz --multiplier=32 --multiplier_location=4C0 --hw_workaround=CPU40 --core=430X  --data_model large --double=32 -D__MSP430F5438A__=1
endif

CLEAN += *.exp5438 symbols.c symbols.h

ARCH=msp430.c leds.c watchdog.c \
     spix.c \
     rtimer-arch.c node-id.c leds-arch.c uart1x.c lcd.c \
     hal_lcd.c hal_lcd_fonts.c duty-cycle-scroller.c cfs-ram.c hal-pmm.c \
     rimestats.c stack-avail.c

ARCH+=$(ARCH_RADIO_SOURCES)

ifeq ($(WITH_SLIP),1)
CFLAGS += -DWITH_SLIP=1
else
#ARCH += uart1-putchar.c
endif
ARCH += slip_uart1.c

ifdef NODEID
CFLAGS+=-DNODEID=$(NODEID)

ifdef BURN_NODEID
CFLAGS+=-DBURN_NODEID
endif # BURN_NODEID
endif # NODEID

help:
	@echo A few useful make commands:
	@echo make help - shows this help
	@echo make TARGET=exp1120 savetarget - stores selection of target to avoid using TARGET= on every make invokation
	@echo make program.upload - compiles and uploads program to connected board
	@echo make program.upload IAR=1 - uses the IAR compiler instead of mspgcc
	@echo make program.upload NODEID=x - uploads with node_id set to x

CONTIKI_TARGET_DIRS = . dev apps net
ifndef CONTIKI_TARGET_MAIN
CONTIKI_TARGET_MAIN = contiki-exp5438-main.c
endif

ifdef UIP_CONF_IPV6
CFLAGS += -DWITH_UIP6=1
endif

CONTIKI_TARGET_SOURCEFILES += $(ARCH) $(UIPDRIVERS)

ifndef MCU
ifdef IAR
MCU=msp430f5438a
else
MCU=msp430f5438
endif
endif
include $(CONTIKI)/cpu/msp430/Makefile.msp430

contiki-$(TARGET).a: ${addprefix $(OBJECTDIR)/,symbols.o}
#	$(AR) rcf $@ $^

ifndef LINKERMAP
LINKERMAP="$(IAR_PATH)/config/lnk430f5438.xcl"
endif

ifdef IAR
STACKSIZE=300
LDFLAGSNO += -xm "$(IAR_PATH)/lib/dlib/dl430xlfn.r43" -f $(LINKERMAP) -D_STACK_SIZE=$(STACKSIZE) -D_DATA16_HEAP_SIZE=$(STACKSIZE) -D_DATA20_HEAP_SIZE=$(STACKSIZE)
LDFLAGS += $(LDFLAGSNO) -Felf -yn
endif

ifndef IAR
ifeq "$(shell msp430-gcc -dumpversion)" "4.7.0"
TARGET_MEMORY_MODEL ?= medium
CFLAGS += -mmemory-model=$(TARGET_MEMORY_MODEL)
CFLAGS += -ffunction-sections -fdata-sections -mcode-region=far -mdata-region=far
LDFLAGS += -mmemory-model=$(TARGET_MEMORY_MODEL) -Wl,-gc-sections
endif # mspgcc 4.7.0
endif # IAR

OBJCOPY=msp430-objcopy
%.ihex: %.$(TARGET)
	$(OBJCOPY) $^ -O ihex $@

%.hex: %.ihex
	mv $< $@

%.upload: %.hex
ifndef PROGPORT
	@echo You must define PROGPORT.
	@echo Example:
	@echo make app.upload PROGPORT=COM11
else
	msp430flasher -s -n msp430x5438a -e ERASE_MAIN -w $< -v -i $(PROGPORT) -z [VCC]
endif

%.upload-mspdebug: %.hex
ifndef COMPORT
	@echo You must define COMPORT.
	@echo Example:
	@echo make app.upload-mspdebug COMPORT=COM11
else
	mspdebug tilib -d $(COMPORT) "erase all"
	mspdebug tilib -d $(COMPORT) "prog $<"
endif

%.upload-clean: %.hex
	msp430flasher -s -n msp430x5438a -w $< -v -z [VCC]

# Serialdump rules
ifeq ($(HOST_OS),Windows)
  SERIALDUMP = serialdump-windows
ifndef CYGWIN_DEV_ID
  CYGWIN_DEV_ID="MSP-EXP430F5438 USB - Serial Port"
endif
  include $(CONTIKI)/tools/cygwin/Makefile.cygwin
endif
ifeq ($(HOST_OS),Darwin)
  SERIALDUMP = serialdump-macos
endif
ifndef SERIALDUMP
  # Assume Linux
  SERIALDUMP = serialdump-linux
endif

login:
	@echo "Connecting to $(COMPORT)"
	$(CONTIKI)/tools/sky/$(SERIALDUMP) -b115200 $(COMPORT)

%.ramusage: %.$(TARGET)
	$(NM) -S $< --size-sort --line-numbers | grep -v " T " | grep -v " t "
%.romusage: %.$(TARGET)
	$(NM) -S $< --size-sort --line-numbers | grep -v " b " | grep -v " B " | grep -v " d " | grep -v " D "


ifdef NODEIDS
%.hexfiles:
	$(foreach id,$(NODEIDS),make TARGET=$(TARGET) BURN_NODEID=1 NODEID=$(id) $*.hex ; mv $*.hex $*-$(id).hex ; rm $*.$(TARGET); )
else # NODEIDS
%.hexfiles:
	@echo usage: make burn-nodeid.hexfiles NODEIDS="1 2 3 4 5 6 7 8 9 10"
	@echo to create 10 .hex files
endif # NODEIDS
